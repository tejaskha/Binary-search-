#include <stdio.h>
#include <stdlib.h>

// Define the stack structure
typedef struct {
    int *data;     // Pointer to the dynamic array
    int top;       // Index of the top element
    int capacity;  // Current capacity of the stack
} Stack;

// Function to create and initialize the stack
Stack* createStack(int initialCapacity) {
    Stack *stack = (Stack*)malloc(sizeof(Stack));
    if (!stack) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    stack->data = (int*)malloc(initialCapacity * sizeof(int));
    if (!stack->data) {
        printf("Memory allocation failed.\n");
        free(stack);
        exit(1);
    }
    stack->top = -1;           // Empty stack
    stack->capacity = initialCapacity;
    return stack;
}

// Function to resize the stack when needed
void resizeStack(Stack *stack) {
    int newCapacity = stack->capacity * 2; // Double the capacity
    stack->data = (int*)realloc(stack->data, newCapacity * sizeof(int));
    if (!stack->data) {
        printf("Memory reallocation failed.\n");
        exit(1);
    }
    stack->capacity = newCapacity;
    printf("Stack resized to capacity %d\n", newCapacity);
}

// Push function to add an element to the stack
void push(Stack *stack, int value) {
    if (stack->top == stack->capacity - 1) {
        resizeStack(stack);
    }
    stack->data[++stack->top] = value; // Increment top and add value
    printf("Pushed %d onto the stack.\n", value);
}

// Pop function to remove and return the top element of the stack
int pop(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack underflow! Cannot pop.\n");
        exit(1);
    }
    return stack->data[stack->top--]; // Return the top value and decrement top
}

// Peek function to return the top element without removing it
int peek(Stack *stack) {
    if (stack->top == -1) {
        printf("Stack is empty! Cannot peek.\n");
        exit(1);
    }
    return stack->data[stack->top];
}

// Function to check if the stack is empty
int isEmpty(Stack *stack) {
    return stack->top == -1;
}

// Function to free the stack's memory
void freeStack(Stack *stack) {
    free(stack->data);
    free(stack);
    printf("Stack memory freed.\n");
}

// Main function to demonstrate the dynamic stack
int main() {
    int initialCapacity = 2;
    Stack *stack = createStack(initialCapacity);

    push(stack, 10);
    push(stack, 20);
    push(stack, 30); // Triggers a resize
    printf("Top element is: %d\n", peek(stack));

    printf("Popped: %d\n", pop(stack));
    printf("Popped: %d\n", pop(stack));

    if (isEmpty(stack)) {
        printf("Stack is empty now.\n");
    }

    freeStack(stack); // Free allocated memory
    return 0;
}
