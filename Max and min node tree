Max node and minimum node tree
#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // For INT_MIN and INT_MAX

// Define the structure for a node in the tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the maximum node value in the tree
int findMaxNode(struct Node* root) {
    if (root == NULL) {
        return INT_MIN; // Return the smallest integer if the tree is empty
    }

    int leftMax = findMaxNode(root->left);    // Maximum in left subtree
    int rightMax = findMaxNode(root->right);  // Maximum in right subtree

    return (root->data > leftMax ? (root->data > rightMax ? root->data : rightMax) : 
            (leftMax > rightMax ? leftMax : rightMax)); // Return the maximum value
}

// Function to find the minimum node value in the tree
int findMinNode(struct Node* root) {
    if (root == NULL) {
        return INT_MAX; // Return the largest integer if the tree is empty
    }

    int leftMin = findMinNode(root->left);    // Minimum in left subtree
    int rightMin = findMinNode(root->right);  // Minimum in right subtree

    return (root->data < leftMin ? (root->data < rightMin ? root->data : rightMin) : 
            (leftMin < rightMin ? leftMin : rightMin)); // Return the minimum value
}

// Main Function
int main() {
    struct Node* root = createNode(5);
    root->left = createNode(3);
    root->right = createNode(8);
    root->left->left = createNode(1);
    root->left->right = createNode(4);
    root->right->right = createNode(10);

    // Find and print the maximum and minimum node values
    int maxNode = findMaxNode(root);
    int minNode = findMinNode(root);

    printf("Maximum node value in the tree: %d\n", maxNode);
    printf("Minimum node value in the tree: %d\n", minNode);

    return 0;
}
