Max and mean node in tree
#include <stdio.h>
#include <stdlib.h>
#include <limits.h> // For INT_MIN

// Define the structure for a node in the tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to find the maximum node value in the tree
int findMaxNode(struct Node* root) {
    if (root == NULL) {
        return INT_MIN; // Return the smallest integer if the tree is empty
    }

    int leftMax = findMaxNode(root->left);    // Maximum in left subtree
    int rightMax = findMaxNode(root->right);  // Maximum in right subtree

    return (root->data > leftMax ? (root->data > rightMax ? root->data : rightMax) : 
            (leftMax > rightMax ? leftMax : rightMax)); // Return the maximum value
}

// Helper function to calculate sum and count of nodes
void calculateSumAndCount(struct Node* root, int* sum, int* count) {
    if (root == NULL) {
        return;
    }

    *sum += root->data; // Add current node value to sum
    (*count)++;         // Increment count of nodes

    calculateSumAndCount(root->left, sum, count);  // Process left subtree
    calculateSumAndCount(root->right, sum, count); // Process right subtree
}

// Function to calculate the mean of all nodes in the tree
float calculateMean(struct Node* root) {
    int sum = 0, count = 0;

    calculateSumAndCount(root, &sum, &count);

    if (count == 0) {
        return 0; // If the tree is empty, mean is 0
    }

    return (float)sum / count; // Return the mean as a float
}

// Main Function
int main() {
    // Manually creating a sample tree:
    //         5
    //        / \
    //       3   8
    //      / \   \
    //     1   4   10
    struct Node* root = createNode(5);
    root->left = createNode(3);
    root->right = createNode(8);
    root->left->left = createNode(1);
    root->left->right = createNode(4);
    root->right->right = createNode(10);

    // Find and print the maximum node value
    int maxNode = findMaxNode(root);
    printf("Maximum node value in the tree: %d\n", maxNode);

    // Calculate and print the mean of all node values
    float meanNode = calculateMean(root);
    printf("Mean of all node values in the tree: %.2f\n", meanNode);

    return 0;
}
